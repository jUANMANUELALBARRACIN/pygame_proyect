# -*- coding: utf-8 -*-
"""Juegopygame.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1M-SkGUtdosTcPQvfToYQx5TDjO1VQkQo
"""

import pygame
import sys
import random   ## se importa libreria para que los enemigos aparezcan de forma aleatoria.

"""El siguiente repositorio consiste en un juego desarrollado en python utilizando la libreria " pygame" . además contiene la libreria " sis" y la libreria " random" .
En el juego se utilizan listas, construccion de funciones , ciclos for y while. El juego consiste en primero desarrollar una ventana rectangular, donde se encuentran un jugador que se enfrenta a distintos enemigos,
estos son representados inicialmente con cuadrados, pero se puede llevar a formas distintas. El jugador controla la posicion del objeto , utilizando las teclas de flecha izquierda y derecha del teclado, con las cuales se puede
mover controladamente hacia a la izquierda o hacia la derecha. Los enemigos , son representados con cuadrados, pero de color distinto. El objetivo del juego será esquivar y evitar la colisión con los enemigos. Para esto el usuario
debe tener reflejos y agilidad en evitar chocar con los obstaculos.
"""

## definimos constantes del juego.

ANCHO = 800   # ancho de la ventana. el origen está en la esquina superior izquierda.
ALTO = 600    # alto.
color_rojo = (255,0,0) ## color rojo escrito en escala rgb
color_negro= (0,0,0)   ## defino color negro en escala rgb.
color_azul = (0,0,255)  ## defino color azul, color de los enemigos.

#caracteristicas jugador:

jugador_size = 50
jugador_pos= [ANCHO/2, ALTO - jugador_size*2]  # posiciona al jugador en el centro de la ventana y un poco arriba de la base.


## caracteristicas enemigo:

enemigo_size = 50
enemigo_pos = [random.randint(0, ANCHO - enemigo_size),0]  ## puede aparece aleatoriamente  entre 0 y 400 pixeles - el ancho del enemigo.


## creamos ventana.

ventana = pygame.display.set_mode((ANCHO,ALTO))  ## crea ventana de juego de 800 x 600 ( ancho, alto)


# cuando cierra la ventana o termina el juego

game_over = False

clock = pygame.time.Clock()  ## defino un reloj para controlar los frames por segundo.

def detectar_colision(jugador_pos,enemigo_pos): # función que detecta si hay colisión entre el jugador y el enemigo.

  jx= jugador_pos[0]   # coordenada de posicion del jugador en x
  jy = jugador_pos[1]  # //////////////////////////////     en y.
  ex = enemigo_pos[0]
  ey = enemigo_pos[1]


  if ( ex >= jx and ex < (jx + jugador_size)) or (jx >= ex and jx < (ex + enemigo_size)):  ## silas coordenadas se cruzan tanto en x como en y.

    if ( ey >= jy and ey < (jy + jugador_size)) or (jy >= ey and jy < (ey + enemigo_size)):

      return True

  return False

while not game_over:

  for event in pygame.event.get():  ## mapea todos los eventos en la pantalla.

    print(event)

    if event.type == pygame.QUIT:

      sys.exit()  #saca del juego.


    if event.type == pygame.KEYDOWN:  ## Reconoce cuando se oprime una tecla.

      x = jugador_pos[0]    # asigna posicion inicial en x del jugador.


      if event.key == pygame.K_LEFT:  ## reconoce si se oprime exactamente la tecla izquierda.(left arrow)

        x = x - jugador_size  ## aumenta ancho del jugador hacia la izquierda.

        pass    # cuando corro, ignora el if, de lo contrario reconoce error.

      if event.key == pygame.K_RIGHT:  ## reconoce tecla derecha . (right arrow)

        x = x + jugador_size  # aumenta ancho de la posicion del jugador hacia la derecha.

  ventana.fill(color_negro)

  if enemigo_pos[1] >= 0 and enemigo_pos[1] < ALTO:  # condicion de que  el enemigo aparesca en pantalla, si se cumple entonces:

    enemigo_pos[1] = enemigo_pos[1] + 20             ## incrementa  la posicion en 20 . da ilusion de mov (vertical)

  else: ## si no aparece en pantalla:
    enemigo_pos[0]= random.randint(0,ANCHO - enemigo_size)  ## coloca al enemigo en lugar aleatorio en x.
    enemigo_pos[1]= 0      ## coloca al enemigo , de nuevo en el borde superior de la ventana.(coordenada en y)



    enemigo_pos[1] = 0


 # Colisiones:

  if detectar_colision(jugador_pos,enemigo_pos):  ## llama ala función

    game_over= True # si chocan se termina el juego.



 # Dibujando  el jugador:

  pygame.draw.rect(ventana,color_rojo, (jugador_pos[0],jugador_pos[1],jugador_size,jugador_size))


## Dibujando enemigos:

  pygame.draw.rect(ventana,color_azul,(enemigo_pos[0],jugador_pos[1],enemigo_size, enemigo_size))


  clock.tick(25)

  pygame.display.update()

